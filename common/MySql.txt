테이블 1(EMP)                  
DEPTNO   EMPNO   ENAME         
A              AAB        111           
B              AAC        123           
C              AAB        111
D              ABC        222
E              BCD        135

테이블 2(DEPT)
DEPTNO   DNAME
A              'Hi'
B              'This is'
C              'Test Table'

1. inner join(내부 조인)    => 교집합과 비슷
    - join 조건에서 동일한 값이 있는 행만을 반환하는 조인
    - ON 조건절을 필수적으로 사용
    EX ) SELECT EMP.DEPTNO, EMPNO, ENAME, DNAME   (1)
            FROM EMP (INNER) JOIN DEPT               (2)
            ON EMP.DEPTNO = DEPT.DEPTNO              (3)

            1) 두 테이블의 컬럼명이 겹치지 않을 경우 테이블.컬럼명으로 작성하지 않아도 됨
            2) inner join은 default값이므로 inner은 생략 가능
            3) SELECT와 달리, 컬럼명이 다르더라도 명확하게 테이블 명과 같은 접두사를 사용해야 함
        결과)
            EMP.DEPTNO   EMPNO   ENAME   DNAME
            A            AAB     111     'Hi'
            B            AAC     123     'This is'
            C            ABA     111     'Test Table'


2. outer join(외부 조인)    => 기준열에 따른 합집합
    - 두 테이블을 조인하되, Table1에는 있고 Table2에는 없는 데이터가 있으면 그 값을 NULL로 출력
    EX ) SELECT EMP.DEPTNO, EMPNO, ENAME, DNAME   
            FROM EMP LEFT (OUTER) JOIN DEPT               (1)
            ON EMP.DEPTNO = DEPT.DEPTNO              

            1) LEFT, RIGHT JOIN이 가능한 경우는 OUTER JOIN밖에 없으므로 OUTER은 생략 가능
               LEFT, RIGHT는 기준테이블에 따라 작성
            
        결과)
            EMP.DEPTNO   EMPNO   ENAME   DNAME
            A                     AAB         111        'Hi'
            B                     AAC         123         'This is'
            C                     ABA         111         'Test Table'
            D                     ABC         222         NULL   
            E                     BCD         135         NULL


3. 뷰
    - 일종의 가상 테이블
    - 실제 테이블처럼 행과 열을 가지고 있지만, 실제로 데이터를 저장하고 있지는 않습니다.
    1) 장점
        1. 특정 사용자에게 테이블 전체가 아닌 필요한 필드만 보여줄 수 있음
        2. 복잡한 쿼리를 단순화해서 사용할 수 있음
        3. 위와 같이 사용한 쿼리를 재사용할 수 있음
    
    2) 단점
        1. 한번 정의된 뷰는 변경이 불가
        2. 삽입, 삭제, 갱신 작업에 많은 제한 사항을 가짐
        3. 자신만의 인덱스를 가질 수 없음

4. 인덱스
    - 특정 컬럼의 값을 가지고 있는 열을 빠르게 찾기 위해서 사용
    - MySQL은 첫 번째 열부터 전체 테이블에 걸쳐서 연관된 열을 검색하기 때문에 테이블이 크면 비용이 엄청 커짐

5. 데이터 정의어, 조작어 ,제어어
    1) 정의어(DDL)
        - 객체의 생성, 변경, 삭제 명령어(CREATE, ALTER, DROP, RENAME 등)
    2) 조작어(DML)
        - 레코드 제어 명령어(SELECT, INSERT, UPDATE, DELETE 등)
        - DB사용자가 응용 프로그램이나 질의어를 통하여 저장된 데이터를 실질적으로 처리하는데 사용
    3)제어어(DCL)
        - 객체 권한 부여등의 제어어(COMMIT, ROLLBACK, GRANT 등)
        - 데이터의 보안, 무결성, 데이터 회복 등을 정의하는데 사용

6. DELETE, DROP, TRUNCATE의 차이점
    1) DELETE
        - 데이터는 지워지지만 테이블 용량은 줄어들지 않음
        - 원하는 데이터만 지울 수 있으며, 복원가능
    2) TRUNCATE
        - 데이터, 용량이 줄어듬
        - 테이블은 삭제되지않고, 데이터만 삭제함
        - 한꺼번에 다지우는 작업이며, 복원 불가
    3) DROP
        - 테이블 전체를 삭제, 공간, 객체를 삭제
        - 복원 불가

18. 트랜잭션이란
    - データベースの状態を変更するため、行う作業だと思います。
    1) COMMIT 
        모든 작업을 정상적으로 처리하겠다고 확정하는 명령어이다.
        트랜젝션의 처리 과정을 데이터베이스에 반영하기 위해서, 변경된 내용을 모두 영구 저장한다.
        COMMIT 수행하면, 하나의 트랜젝션 과정을 종료하게 된다.
        TRANSACTION(INSERT, UPDATE, DELETE)작업 내용을 실제 DB에 저장한다.
        이전 데이터가 완전히 UPDATE된다.
        모든 사용자가 변경한 데이터의 결과를 볼 수 있다
    2) ROLLBACK
        작업 중 문제가 발생했을 때, 트랜젝션의 처리 과정에서 발생한 변경 사항을 취소하고, 트랜젝션 과정을 종료시킨다.
        트랜젝션으로 인한 하나의 묶음 처리가 시작되기 이전의 상태로 되돌린다.
        TRANSACTION(INSERT, UPDATE, DELETE)작업 내용을 취소한다.
        이전 COMMIT한 곳까지만 복구한다.
    3) 차이점
        COMMITは今までつくたっことや変更した内容を保存することですが、
        ROLLBACKは作業中、エラや問題が発生した場合、
        変更した内容をキャンセルしていぜんにCOMMITしたところまで戻すことです。

