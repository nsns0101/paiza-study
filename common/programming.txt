1. 접근 제한자
    1)  public        : 모든 접근을 허용
    2)  protected  : 같은 패키지(폴더)에 있는 객체와 상속관계의 객체들만 허용
    3)  default       : 같은 패키지(폴더)에 있는 객체들만 허용
    4)  private       : 현재 객체 내에서만 허용

2. 추상 클래스
    1) 뜻
        1. 추상 메서드를 포함한 클래스
        2. abstract로 선언
    2) 추상 클래스를 쓰는 이유
        1. 공통된 필드와 메서드를 통일할 목적
            추상클래스에서 미리 정의한 필드와 메서드가 있다면, 실체 클래스는 추상클래스의
            필드와 메서드명을 변경할 수 없고, 무조건 해당 명명으로 구현해야한다. 
            즉, 필드와 메서드 이름을 통일하여 유지보수성을 높이고 통일성을 유지할 수 있다.
        2. 실체 클래스 구현시, 시간 절약
            개발시 필요한 추상클래스를 상속받으면, 필드와 메서드가 오버라이딩 된다.
            즉, 강제로 주어지는 필드와 메서드를 가지고 나만의 스타일대로 구현만 하면 된다.

3. 추상 메서드
    1) 처리가 적혀있지 않고 정의만 한 메서드이며, 정의만 했기 때문에 상속을 받으면 자식클래스에서는
        반드시 구현을 해야한다.

4. 구현 클래스
    - 추상 메서드를 구현하는 클래스

5. 인터페이스
    - 추상 메서드만 존재하는 추상 클래스
    - 클래스는 extends 상속이지만, 인터페이스는 implements로 구현이 가능

6. int와 integer
    1) int
        - primitive 자료형(long, float, double ...)
        - 산술 연산이 가능
        - null로 초기화 불가
    2) integer
        - Unboxing을 하지 않으면 산술 연산이 불가하지만 null값 처리 가능
        - null값 처리가 용이하기 때문에 SQL과 연동이 용이
        - DB에서 자료형이 정수형이지만 NULL값이 필요한 경우 VO에서 Integer을 사용가능

7. NULL과 Undefined
    - 둘다 값이 없음을 의미
    1) Undefined
        - 변수를 선언만 하고 초기화 하지 않을 경우
    2) NULL
        - 변수를 선언하고 NULL이라는 빈 값을 할당한 경우

8. 자바스크립트의 this


9. Array와 List
    1) 공통점
        - Array와 List는 목록, 순서가 있는 일련의 집합체
    2) 차이점
        - Array는 index자리에 value가 삭제되면 뻥 떠버리기 때문에 메우기위한 로직이 필요
        - List는 index자리에 value가 삭제되면 index를 앞으로 전진시킴

10. Map
    - 객체와 비슷하지만 메소드만을 이용해 값을 넣고 뺌.
    - Key와 Value로 구분
    EX) let max = new Map();
        max.set("id", 0);
        max.set("이름", "마이클");

        let michael = new Map([
            ["id", 0],
            ["이름", "마이클"],
        ]);

        max.get("이름);  => "마이클"
        max.delete("나이) => 삭제 성공시 true 반환
        max.clear();    => 맵 안의 프로퍼티 전부삭제

11. MVC패턴이란
    - 웹이나 앱등을 개발할 때의 작업을 하나하나의 로직으로 분리한 디자인 패턴
    - 좀더 쉽고 편리하면서도 유지보수가 좋아 
    - Model-View-Controller로 구성
    - 클라이언트의 요청을 받으면 controller에서 해당하는 Model에서 데이터를 불러오고
      그 정보를 바탕으로 View를 통해 시각적인 표현이 가능함

12. 객체지향프로그래밍이란
    - 모든 데이터를 객체로 취급하며, 하나하나의 독립된 객체가 프로그래밍의 중심이 되는 것
    - 객체의 상태(state)와 행동(behaior)을 구체화하는 형태의 프로그래밍.
    1) 캡슐화
        - 데이터와 코드의 형태를 외부로부터 알 수 없게 하고, 데이터의 구조, 역할, 기능을 하나의 캡슐형태로 만드는 것
    2) 상속
        - 상위 클래스의 객체들을 하위클래스에서 이어받는 것
    3) 다형성
        - 한 객체가 다른 여러 형태로 재구성 되는 것
        - 오버라이딩, 오버로딩 등
        
13. 클래스
    - 객체지향 프로그래밍에서 사용하는 객체를 정의하는 틀이나 설계도와 같은 의미
    - 객체의 상태를 나타내는 필드(변수), 객체의 행동을 나타내는 메서드로 구성

14. 오버라이드
    - 부모 클래스가 가지고 있는 메서드를 하위 클래스에서 재정의하는 것
    - 메서드명, 변수타입과 수, 리턴타입

15. 오버로딩
    - 같은 이름의 메서드 여러개를 가지면서 매개변수의 유형과 개수가 다르도록하는 기술

16. Java, PHP의 차이점
    - php 버전5 이후로 둘다 객체지향언어가 됐지만,
    - java는 기본적으로 컴파일언어이고, php는 인터프리터 언어이다.
    1) 뭘 더 선호하는지?
        - 인터프리터 형식의 php가 좀 더 개발하기 쉽고 
        프로젝트를 하면서 php 쪽을 더 공부했기 때문에
        php쪽이 더 좋지만,
        둘다 객체지향언어이기때문에 회사에서 뭘해도 상관은 없음

17. promise, async await
    - 비동기 메서드를 마치 동기 메서드처럼 값을 반환할 수 있는 기술
    - 자바스크립트는 비동기로 작동하기 때문에, 순차적으로 작동하게 하려면 콜백지옥에 빠질 수 있다.
    - 그래서 Promise를 도입하여 보다 간단한 코드로 나타낼 수 있는 장점이 있다.
    - resolve, reject

19. AJAX
    - 페이지를 리로드하지 않고도, 페이지의 일부만을 바꿀 수 있는 기술
    - 자바스크립트를 사용한 비동기 통신.
    - 클라이언트와 서버간에 XML 데이터를 주고 받는 기술.

20. 자신있는 언어
    - JavaScript의 라이브러리인 React.js
    - 부분적인 렌더링, SPA의 장점이 있어 흥미가 있음
    - 졸업프로젝트나 개인프로젝트에서 사용하면서 자신감이 생김










    


